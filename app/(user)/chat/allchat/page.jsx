"use client";
import { useEffect, useState } from "react";

export default function ChatPage() {
    const [users, setUsers] = useState([]);
    const [selectedUser, setSelectedUser] = useState(null);
    const [message, setMessage] = useState("");

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Realtime ‡∏ú‡πà‡∏≤‡∏ô SSE
    useEffect(() => {
        const eventSource = new EventSource("/api/lineChat?stream=true");

        eventSource.onmessage = (e) => {
            try {
                const data = JSON.parse(e.data);
                setUsers(data);

                // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢
                if (selectedUser) {
                    const updated = data.find(u => u.userId === selectedUser.userId);
                    if (updated) setSelectedUser(updated);
                }
            } catch (err) {
                console.error("‚ùå Error parsing SSE:", err);
            }
        };

        eventSource.onerror = () => {
            console.warn("‚ö†Ô∏è SSE disconnected, will retry...");
            eventSource.close();
        };

        return () => eventSource.close();
    }, [selectedUser?.userId]); // ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    const sendMessage = async () => {
        if (!selectedUser || !message.trim()) return;

        await fetch("/api/lineChat", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ userId: selectedUser.userId, text: message }),
        });

        setMessage("");
    };

    return (
        <div className="flex h-screen">
            {/* Sidebar: ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ */}
            <div className="w-1/4 bg-gray-100 border-r overflow-y-auto">
                <h2 className="p-4 font-bold text-lg border-b">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</h2>
                {users.length === 0 && (
                    <div className="p-4 text-gray-400 text-sm">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</div>
                )}
                {users.map(u => (
                    <div
                        key={u.userId}
                        onClick={() => setSelectedUser(u)}
                        className={`p-3 cursor-pointer border-b hover:bg-gray-200 ${selectedUser?.userId === u.userId ? "bg-gray-300" : ""
                            }`}
                    >
                        {u.displayName}
                    </div>
                ))}
            </div>

            {/* Main Chat */}
            <div className="flex-1 flex flex-col bg-white">
                {selectedUser ? (
                    <>
                        <div className="flex-1 p-4 overflow-y-auto">
                            {selectedUser.messages.map((m, i) => (
                                <div key={i} className={`my-2 ${m.from === "customer" ? "text-left" : "text-right"}`}>
                                    <span
                                        className={`inline-block px-3 py-2 rounded-2xl ${m.from === "customer" ? "bg-gray-200" : "bg-green-300"
                                            }`}
                                    >
                                        {m.text}
                                    </span>
                                </div>
                            ))}
                        </div>

                        {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */}
                        <div className="p-4 border-t flex bg-gray-50">
                            <input
                                className="flex-1 border rounded px-3 py-2 mr-2"
                                value={message}
                                onChange={e => setMessage(e.target.value)}
                                placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..."
                            />
                            <button
                                onClick={sendMessage}
                                className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
                            >
                                ‡∏™‡πà‡∏á
                            </button>
                        </div>
                    </>
                ) : (
                    <div className="flex items-center justify-center flex-1 text-gray-500">
                        üó®Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó
                    </div>
                )}
            </div>
        </div>
    );
}
